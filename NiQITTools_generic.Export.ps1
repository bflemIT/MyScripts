#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 3ae28607-c640-4c8d-a962-5e35bc4fdd60
# Source File: NiQITTools_generic.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
wd/KD/y/kv39b8avOW1zBwAA#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.160
     Generated on:       8/19/2020 10:44 AM
     Generated by:       !BenPC
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2019
#>


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-NiQITTools_generic_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formMain = New-Object 'System.Windows.Forms.Form'
	$DeletedItems = New-Object 'System.Windows.Forms.CheckBox'
	$uniIDCell = New-Object 'System.Windows.Forms.ComboBox'
	$uniID = New-Object 'System.Windows.Forms.TextBox'
	$Cell6Desc = New-Object 'System.Windows.Forms.TextBox'
	$Cell5Desc = New-Object 'System.Windows.Forms.TextBox'
	$Cell2Desc = New-Object 'System.Windows.Forms.TextBox'
	$Cell3Desc = New-Object 'System.Windows.Forms.TextBox'
	$Cell4Desc = New-Object 'System.Windows.Forms.TextBox'
	$Cell1Desc = New-Object 'System.Windows.Forms.TextBox'
	$Cell6 = New-Object 'System.Windows.Forms.TextBox'
	$Cell5 = New-Object 'System.Windows.Forms.TextBox'
	$Success = New-Object 'System.Windows.Forms.TextBox'
	$AUDEntry = New-Object 'System.Windows.Forms.Button'
	$Cell2 = New-Object 'System.Windows.Forms.TextBox'
	$cell3 = New-Object 'System.Windows.Forms.TextBox'
	$Cell4 = New-Object 'System.Windows.Forms.TextBox'
	$Cell1 = New-Object 'System.Windows.Forms.TextBox'
	$buttonDelete = New-Object 'System.Windows.Forms.Button'
	$buttonUpdate = New-Object 'System.Windows.Forms.Button'
	$buttonAdd = New-Object 'System.Windows.Forms.Button'
	$NiQITTablesSelection = New-Object 'System.Windows.Forms.ComboBox'
	$datagridviewResults = New-Object 'System.Windows.Forms.DataGridView'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$formMain_Load = {
		# ******************************************
		# ***   database global params defined   ***
		# ******************************************
		$global:sql_database = "DBNAME"
		$global:sql_server = "DBSERVER"
		
		# Calling function to load the NiQIT db tables into dropdown list
		_SQLcmd "Load Tables"
		
		# Calling function to hide and reset shared resources
		hideInputs
	}
	
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
		$ComboBox.ValueMember = $ValueMember
	}
	#endregion
	
	
	#region Control Helper Functions
	
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($null -eq $Item)
		{
			$DataGridView.DataSource = $null
		}
		elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
		SuccessUpdate 3
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($null -eq $InputObject)
		{
			$Table.Clear()
			return @( ,$Table)
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	#endregion
	
	$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		if($datagridviewResults.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridviewResults.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
	
			$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
		}
	}
	
	$NiQITTablesSelection_SelectedIndexChanged = {
		# Calling function to query NiQIT db based upon table selected
		_SQLcmd "Table Selected"
		
		# Calling function to hide and reset shared resources
		hideInputs
	}
	
	$uniIDCell_SelectedIndexChanged = {
		# Calling function to query NiQIT db based upon table selected
		_SQLcmd "RetrieveRow" $NiQITTablesSelection.SelectedItem
	}
	
	$buttonAdd_Click = {
		# Calling function to hide and reset shared resources
		hideInputs
		
		# Calling function to enable specfic fields
		inputvisible $NiQITTablesSelection.SelectedItem "Add"
		
		# Add appropriate text to shared button
		$AUDEntry.Text = "Add Entry"
	}
	$buttonUpdate_Click = {
		# Calling function to hide and reset shared resources
		hideInputs
		
		# Calling function to query NiQIT db and gather uniID
		_SQLcmd "UniqList"
		
		# Calling function to enable specfic fields
		inputvisible $NiQITTablesSelection.SelectedItem "Update"
		
		# Add appropriate text to shared button
		$AUDEntry.Text = "Update Entry"
	}
	$buttonDelete_Click = {
		# Calling function to hide and reset shared resources
		hideInputs
		
		# Calling function to query NiQIT db and gather uniID
			_SQLcmd "UniqList"
		
		# Calling function to enable specfic fields
		inputvisible $NiQITTablesSelection.SelectedItem "Delete"
		
		# Setting text on button to match action
		$AUDEntry.Text = "Delete Entry"
	}
	
	$AUDEntry_Click = {
		# Set field error to false 
		$FieldErr = $false
		
		# If statement for Add Entry
		if ($AUDEntry.text -eq "Add Entry")
		{
			# Check is table name is DomainNames
			If ($NiQITTablesSelection.SelectedItem -eq "DomainNames")
			{
				# verify content of cells and error if need be
				If ($Cell1.Text -eq "" -or $Cell1.Text -eq $NULL -or $Cell2.Text -eq "" -or $Cell2.Text -eq $NULL -or $Cell3.Text -eq "" -or $Cell3.Text -eq $NULL -or $Cell4.Text -eq "" -or $Cell4.Text -eq $NULL)
				{ $FieldErr = $true }
			}
			
			# Check is table name is ManagementUrl
			If ($NiQITTablesSelection.SelectedItem -eq "ManagementUrl")
			{
				# verify content of cells and error if need be
				If ($Cell1.Text -eq "" -or $Cell1.Text -eq $NULL -or $Cell2.Text -eq "" -or $Cell2.Text -eq $NULL -or $Cell3.Text -eq "" -or $Cell3.Text -eq $NULL -or $Cell4.Text -eq "" -or $Cell4.Text -eq $NULL)
				{ $FieldErr = $true }
			}
			
			# Check is table name is SSLCerts
			If ($NiQITTablesSelection.SelectedItem -eq "SSLCerts")
			{
				# verify content of cells and error if need be
				If ($Cell1.Text -eq "" -or $Cell1.Text -eq $NULL -or $Cell2.Text -eq "" -or $Cell2.Text -eq $NULL -or $Cell3.Text -eq "" -or $Cell3.Text -eq $NULL -or $Cell4.Text -eq "" -or $Cell4.Text -eq $NULL -or $Cell5.Text -eq "" -or $Cell5.Text -eq $NULL -or $Cell6.Text -eq "" -or $Cell6.Text -eq $NULL)
				{ $FieldErr = $true }
			}
			
			# If statement to check for error
			if ($FieldErr -eq $false)
			{
				SuccessUpdate 7
				# Check is table name is DomainNames or ManagementUrl
				If ($NiQITTablesSelection.SelectedItem -eq "DomainNames" -or $NiQITTablesSelection.SelectedItem -eq "ManagementUrl")
				
				# Calling function to run SQL command
				{ _SQLcmd $AUDEntry.text $NiQITTablesSelection.SelectedItem $Cell1.Text $Cell2.Text $cell3.Text $Cell4.Text }
				
				# Check is table name is SSLCerts
				If ($NiQITTablesSelection.SelectedItem -eq "SSLCerts")
				
				# Calling function to run SQL command
				{ _SQLcmd $AUDEntry.text $NiQITTablesSelection.SelectedItem $Cell1.Text $Cell2.Text $Cell3.Text $Cell4.Text $Cell5.Text $Cell6.Text }
			}
			
			else
			
			{ SuccessUpdate 8 }
		}
		
		# If statement for Update Entry
		if ($AUDEntry.text -eq "Update Entry")
		{
			If ($uniIDCell.SelectedItem -eq "" -or $uniIDCell.SelectedItem -eq $null)
			{
				{ $FieldErr = $true }
			}
			if ($FieldErr -eq $false)
			{
				SuccessUpdate 7
				If ($NiQITTablesSelection.SelectedItem -eq "DomainNames" -or $NiQITTablesSelection.SelectedItem -eq "ManagementUrl")
				{ _SQLcmd $AUDEntry.text $NiQITTablesSelection.SelectedItem $Cell1.Text $Cell2.Text $cell3.Text $Cell4.Text $uniIDCell.SelectedItem}
				If ($NiQITTablesSelection.SelectedItem -eq "SSLCerts")
				{ _SQLcmd $AUDEntry.text $NiQITTablesSelection.SelectedItem $Cell1.Text $Cell2.Text $Cell3.Text $Cell4.Text $Cell5.Text $Cell6.Text $uniIDCell.SelectedItem }
				else
				{ SuccessUpdate 8 }
			}
		}
		# If statement for Delete Entry
		if ($AUDEntry.text -eq "Delete Entry")
		{
			If ($uniIDCell.SelectedItem -eq "" -or $uniIDCell.SelectedItem -eq $null)
			{
				{ $FieldErr = $true }
			}
			if ($FieldErr -eq $false)
			{
				SuccessUpdate 7
				_SQLcmd $AUDEntry.text $NiQITTablesSelection.SelectedItem $uniIDCell.SelectedItem
			}
			else
			{ SuccessUpdate 8 }
		}
	}
	
	
	$Reload_Click = {
		#TODO: Place custom script here
		$Formmain.refresh()
		#$Reload = New-Object System.Windows.Forms.Button
		#$Reloadb.Add_Click({ $formMain_Load })
		#	$form.refresh()
	#	hideInputs
	#	$buttonAdd.Visible = $false
	#	$buttonDelete.Visible = $false
	#	$buttonUpdate.Visible = $false
	}
	
	$buttonExit_Click = {
		#TODO: Place custom script here
		$formMain.Close()
	}
	
	
	# ****************************************************************************
	# ************************ Function runs SQL command *************************
	# ********* Based upon Add, Update, and Delete, spefic SQLcmd is ran *********
	# ****************************************************************************
	Function _SQLcmd ($b_AUD, $TableName, $Column1, $Column2, $Column3, $Column4, $Column5, $Column6, $Column7)
	{
		
		
		If ($b_AUD -eq "Load Tables")
		{
			try
			{
				$NiQITTableResults = Invoke-Sqlcmd -Query "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG='$global:sql_database'" -ServerInstance "$global:sql_server" -Database "$global:sql_database" -ConnectionTimeout 10 -erroraction Stop
				Update-ComboBox -ComboBox $NiQITTablesSelection $NiQITTableResults.itemarray
				SuccessUpdate 1
			}
			Catch
			{ SuccessUpdate 2 }
		}
		
		If ($b_AUD -eq "Table Selected")
		{
			try
			{
				$NiQTable = $NiQITTablesSelection.SelectedItem
				if ($DeletedItems.Checked -eq $false)
				{ $NiQITTableResult = Invoke-Sqlcmd -ServerInstance "$global:sql_server" -Database "$global:sql_database" -ConnectionTimeout 10 -erroraction Stop -Query "SELECT * FROM $NiQTable where del_status = 'false' order by uniID asc" | Select * -ExcludeProperty RowError, RowState, Table, ItemArray, HasErrors, Del_Status }
				else
				{ $NiQITTableResult = Invoke-Sqlcmd -ServerInstance "$global:sql_server" -Database "$global:sql_database" -ConnectionTimeout 10 -erroraction Stop -Query "SELECT * FROM $NiQTable order by uniID asc" | Select * -ExcludeProperty RowError, RowState, Table, ItemArray, HasErrors }
				IF ($NiQITTableResult -ne $null)
				{
					Update-DataGridView -DataGridView $datagridviewResults -Item $NiQITTableResult -AutoSizeColumns DisplayedCells
					$buttonAdd.Visible = $true
					$buttonDelete.Visible = $true
					$buttonUpdate.Visible = $true
					SuccessUpdate 3
				}
				else
				{
					$buttonAdd.Visible = $true
					$datagridviewResults.DataSource = $null
				}
				hideInputs
				}
			Catch
			{ SuccessUpdate 4 }
		}
		If ($b_AUD -eq "Add Entry")
		{
			try
			{
				If ($TableName -eq "DomainNames")
				{ $NiQITTableResult = Invoke-Sqlcmd -ServerInstance "$global:sql_server" -Database "$global:sql_database" -ConnectionTimeout 10 -erroraction Stop -Query "INSERT INTO $TableName (HostProvider, DomainName, ExpiresOn, HostProviderUrl, Del_status) VALUES ('$Column1', '$Column2', '$Column3', '$Column4', '0')" }
				If ($TableName -eq "ManagementUrl")
				{ $NiQITTableResult = Invoke-Sqlcmd -ServerInstance "$global:sql_server" -Database "$global:sql_database" -ConnectionTimeout 10 -erroraction Stop -Query "INSERT INTO $TableName (SiteName, SiteUrl, SiteDescription, HostServer, Del_status) VALUES ('$Column1', '$Column2', '$Column3', '$Column4', '0')" }
				If ($TableName -eq "SSLCerts")
				{ $NiQITTableResult = Invoke-Sqlcmd -ServerInstance "$global:sql_server" -Database "$global:sql_database" -ConnectionTimeout 10 -erroraction Stop -Query "INSERT INTO $TableName (HostProvider, CertName, CertUse, CertUrl, CertExpiresOn, HostProviderUrl, Del_status) VALUES ('$Column1', '$Column2', '$Column3', '$Column4', '$Column5', '$Column6', '0')" }
				_SQLcmd "Table Selected"
				SuccessUpdate 9
				}
			catch
			{ SuccessUpdate 10 }
		}
		If ($b_AUD -eq "Update Entry")
		{
			try
			{
				If ($TableName -eq "DomainNames")
				{ $NiQITTableResult = Invoke-Sqlcmd -ServerInstance "$global:sql_server" -Database "$global:sql_database" -ConnectionTimeout 10 -erroraction Stop -Query "Update $TableName Set HostProvider = '$Column1', DomainName='$Column2', ExpiresOn='$Column3', HostProviderUrl='$Column4' where uniID ='$Column5'" }
				If ($TableName -eq "ManagementUrl")
				{ $NiQITTableResult = Invoke-Sqlcmd -ServerInstance "$global:sql_server" -Database "$global:sql_database" -ConnectionTimeout 10 -erroraction Stop -Query "Update $TableName Set SiteName = '$Column1', SiteUrl = '$Column2', SiteDescription = '$Column3', HostServer = '$Column4'  where uniID ='$Column5'" }
				If ($TableName -eq "SSLCerts")
				{ $NiQITTableResult = Invoke-Sqlcmd -ServerInstance "$global:sql_server" -Database "$global:sql_database" -ConnectionTimeout 10 -erroraction Stop -Query "Update $TableName Set HostProvider = '$Column1', CertName = '$Column2', CertUse = '$Column3', CertUrl = '$Column4', CertExpiresOn = '$Column5', HostProviderUrl = '$Column6'  where uniID ='$Column7" }
				_SQLcmd "Table Selected"
				SuccessUpdate 11
			}
			catch
			{ SuccessUpdate 12 }
			
		}
		If ($b_AUD -eq "Delete Entry")
		{
			try
			{
				$NiQITTableResult = Invoke-Sqlcmd -ServerInstance "$global:sql_server" -Database "$global:sql_database" -ConnectionTimeout 10 -erroraction Stop -Query "update $TableName set del_status = 1 WHERE uniID = '$Column1'"
				_SQLcmd "Table Selected"
				SuccessUpdate 13
			}
			catch
			{ SuccessUpdate 14 }
		}
		if ($b_AUD -eq "UniqList")
		{
			Try
			{
				$NiQTable = $NiQITTablesSelection.SelectedItem
				$NiQITTableResults = Invoke-Sqlcmd -Query "SELECT uniID FROM $NiQTable where del_status = 'false'" -ServerInstance "$global:sql_server" -Database "$global:sql_database" -ConnectionTimeout 10 -erroraction Stop
				Update-ComboBox -ComboBox $uniIDCell $NiQITTableResults.itemarray
				SuccessUpdate 5
			}
			Catch
			{ SuccessUpdate 6 }
		}
		if ($b_AUD -eq "RetrieveRow" )
		{
			try
			{
				Write-Host "in try"
				$NiQTable = $NiQITTablesSelection.SelectedItem
				$c_uniID = $uniIDCell.SelectedItem
				$NiQITTableResults = Invoke-Sqlcmd -Query "SELECT * FROM $NiQTable where uniID = '$c_uniID'" -ServerInstance "$global:sql_server" -Database "$global:sql_database" -ConnectionTimeout 10 -erroraction Stop
				$Cell1.Text = $NiQITTableResults.item(1)
				$Cell2.Text =$NiQITTableResults.item(2)
				$cell3.Text =$NiQITTableResults.item(3)
				$Cell4.Text = $NiQITTableResults.item(4)
				$Cell5.Text = $NiQITTableResults.item(5)
				$Cell6.Text = $NiQITTableResults.item(6)
			}
			Catch
			{}
		}
	}
	# **************************************************************
	# ************************* End SQLAdd *************************
	# **************************************************************
	
	# ****************************************************************************
	# ********************* Function updates the Success box**********************
	# ***** Success number is sent from within the code to generate message ******
	# ********** This function sets the field text to null when switching ********
	# ****************************************************************************
	Function SuccessUpdate ($Message)
	{
		switch ($Message)
		{
			1 { $Success.Text = "Selection List Generated" }
			2 { $Success.Text = "Unable to generate IT Tables" }
			3 { $Success.Text = "Table Selected" }
			4 { $Success.Text = "Unable to retrieve table rows" }
			5 { $Success.Text = "UniID Table Generated" }
			6 { $Success.Text = "Unable to retrieve uniID" }
			7 { $Success.Text = "AUD fields passed" }
			8 { $Success.Text = "AUD missing mandatory data" }
			9 { $Success.Text = "Add Entry Succeeded" }
			10 { $Success.Text = "Error adding record" }
			11 { $Success.Text = "Update Entry Succeeded" }
			12 { $Success.Text = "Error updating record" }
			13 { $Success.Text = "Delete record Succeeded" }
			14 { $Success.Text = "Error deleting record" }
		}
	}
	# **************************************************************
	# ********************** End SucessUpdate **********************
	# **************************************************************
	
	
	# ****************************************************************************
	# ********************* Function hides all input fields **********************
	# ***** This function hides all fields related to Add, Update, and Delete* ***
	# ********** This function sets the field text to null when switching ********
	# ****************************************************************************
	function hideInputs
	{
		$uniIDCell.Text = $null
		$Cell1.Text = $null
		$Cell2.Text = $null
		$cell3.Text = $null
		$Cell4.Text = $null
		$Cell5.Text = $null
		$Cell6.Text = $null
		$btn_AUD = $null
		$AUDEntry.Text = $null
		$uniIDCell.Visible = $false
		$Cell1.Visible = $false
		$Cell2.Visible = $false
		$cell3.Visible = $false
		$Cell4.Visible = $false
		$Cell5.Visible = $false
		$Cell6.Visible = $false
		$uniID.Visible = $false
		$Cell1Desc.Visible = $false
		$Cell2Desc.Visible = $false
		$cell3Desc.Visible = $false
		$Cell4Desc.Visible = $false
		$Cell5Desc.Visible = $false
		$Cell6Desc.Visible = $false
		$AUDEntry.Visible = $false
	
	}
	# **************************************************************
	# *********************** End hideInputs ***********************
	# **************************************************************
	
	
	# **********************************************************************************
	# ********************* Function enables certain input fields **********************
	# *** This function enables field based upon the Add, Update, and Delete buttons ***
	# **********************************************************************************
	function inputvisible ($table, $b_AUD)
	{
		$Cell1.Enabled = $true
		$Cell2.Enabled = $true
		$cell3.Enabled = $true
		$Cell4.Enabled = $true
		$Cell5.Enabled = $true
		$Cell6.Enabled = $true
		
		#TODO: Place custom script here
		If ($table -eq "DomainNames")
		{
			$Cell1.Visible = $true
			$Cell2.Visible = $true
			$cell3.Visible = $true
			$Cell4.Visible = $true
			$Cell1.BackColor = 'BlanchedAlmond'
			$Cell2.BackColor = 'BlanchedAlmond'
			$cell3.BackColor = 'BlanchedAlmond'
			$Cell4.BackColor = 'BlanchedAlmond'
			$Cell1Desc.Visible = $true
			$Cell2Desc.Visible = $true
			$cell3Desc.Visible = $true
			$Cell4Desc.Visible = $true
			$Cell1Desc.Text = "HostProvider"
			$Cell2Desc.Text = "DomainName"
			$cell3Desc.Text = "ExpiresOn (YYYY-MM-DD)"
			$Cell4Desc.Text = "HostProviderUrl"
			$AUDEntry.Visible = $true
			If ($b_AUD -eq "Delete")
			{
				$Cell1.Enabled = $false
				$Cell2.Enabled = $false
				$cell3.Enabled = $false
				$Cell4.Enabled = $false
				$Cell1.BackColor = 'White'
				$Cell2.BackColor = 'White'
				$cell3.BackColor = 'White'
				$Cell4.BackColor = 'White'
			}
		}
		if ($table -eq "ManagementUrl")
		{
			$Cell1.Visible = $true
			$Cell2.Visible = $true
			$cell3.Visible = $true
			$Cell4.Visible = $true
			$Cell1.BackColor = 'BlanchedAlmond'
			$Cell2.BackColor = 'BlanchedAlmond'
			$cell3.BackColor = 'BlanchedAlmond'
			$Cell4.BackColor = 'BlanchedAlmond'	
			$Cell1Desc.Visible = $true
			$Cell2Desc.Visible = $true
			$cell3Desc.Visible = $true
			$Cell4Desc.Visible = $true
			$Cell1Desc.Text = "SiteName"
			$Cell2Desc.Text = "SiteUrl"
			$cell3Desc.Text = "SiteDescription"
			$Cell4Desc.Text = "HostServer"
			$AUDEntry.Visible = $true
			If ($b_AUD -eq "Delete")
			{
				$Cell1.BackColor = 'White'
				$Cell2.BackColor = 'White'
				$cell3.BackColor = 'White'
				$Cell4.BackColor = 'White'
			}
		}
		if ($table -eq "SSLCerts")
		{
			$Cell1.Visible = $true
			$Cell2.Visible = $true
			$cell3.Visible = $true
			$Cell4.Visible = $true
			$Cell5.Visible = $true
			$Cell6.Visible = $true
			$Cell1.BackColor = 'BlanchedAlmond'
			$Cell2.BackColor = 'BlanchedAlmond'
			$cell3.BackColor = 'BlanchedAlmond'
			$Cell4.BackColor = 'BlanchedAlmond'
			$Cell5.BackColor = 'BlanchedAlmond'
			$Cell6.BackColor = 'BlanchedAlmond'
			$Cell1Desc.Visible = $true
			$Cell2Desc.Visible = $true
			$cell3Desc.Visible = $true
			$Cell4Desc.Visible = $true
			$Cell5Desc.Visible = $true
			$Cell6Desc.Visible = $true
			$Cell1Desc.Text = "HostProvider"
			$Cell2Desc.Text = "CertName"
			$cell3Desc.Text = "CertUse"
			$Cell4Desc.Text = "CertUrl"
			$Cell5Desc.Text = "CertExpiresOn (YYYY-MM-DD)"
			$Cell6Desc.Text = "HostProviderUrl"
			$AUDEntry.Visible = $true
			If ($b_AUD -eq "Delete")
			{
				$Cell1.Enabled = $false
				$Cell2.Enabled = $false
				$cell3.Enabled = $false
				$Cell4.Enabled = $false
				$Cell5.Enabled = $false
				$Cell6.Enabled = $false
				$Cell1.BackColor = 'White'
				$Cell2.BackColor = 'White'
				$cell3.BackColor = 'White'
				$Cell4.BackColor = 'White'
				$Cell5.BackColor = 'White'
				$Cell6.BackColor = 'White'
			}
			
		}
		If ($b_AUD -eq "Update" -or $b_AUD -eq "Delete")
		{
	
			$uniID.Visible = $true
			$uniIDCell.Visible = $true
		}
	
		SuccessUpdate 5
	}
	# **************************************************************
	# ********************* End InputVisible ***********************
	# **************************************************************
	
	$DeletedItems_CheckedChanged={
		#TODO: Place custom script here
		_SQLcmd "Table Selected"
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formMain.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$DeletedItems.remove_CheckedChanged($DeletedItems_CheckedChanged)
			$uniIDCell.remove_SelectedIndexChanged($uniIDCell_SelectedIndexChanged)
			$AUDEntry.remove_Click($AUDEntry_Click)
			$buttonDelete.remove_Click($buttonDelete_Click)
			$buttonUpdate.remove_Click($buttonUpdate_Click)
			$buttonAdd.remove_Click($buttonAdd_Click)
			$NiQITTablesSelection.remove_SelectedIndexChanged($NiQITTablesSelection_SelectedIndexChanged)
			$datagridviewResults.remove_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
			$buttonExit.remove_Click($buttonExit_Click)
			$formMain.remove_Load($formMain_Load)
			$formMain.remove_Load($Form_StateCorrection_Load)
			$formMain.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formMain.SuspendLayout()
	#
	# formMain
	#
	$formMain.Controls.Add($DeletedItems)
	$formMain.Controls.Add($uniIDCell)
	$formMain.Controls.Add($uniID)
	$formMain.Controls.Add($Cell6Desc)
	$formMain.Controls.Add($Cell5Desc)
	$formMain.Controls.Add($Cell2Desc)
	$formMain.Controls.Add($Cell3Desc)
	$formMain.Controls.Add($Cell4Desc)
	$formMain.Controls.Add($Cell1Desc)
	$formMain.Controls.Add($Cell6)
	$formMain.Controls.Add($Cell5)
	$formMain.Controls.Add($Success)
	$formMain.Controls.Add($AUDEntry)
	$formMain.Controls.Add($Cell2)
	$formMain.Controls.Add($cell3)
	$formMain.Controls.Add($Cell4)
	$formMain.Controls.Add($Cell1)
	$formMain.Controls.Add($buttonDelete)
	$formMain.Controls.Add($buttonUpdate)
	$formMain.Controls.Add($buttonAdd)
	$formMain.Controls.Add($NiQITTablesSelection)
	$formMain.Controls.Add($datagridviewResults)
	$formMain.Controls.Add($buttonExit)
	$formMain.AutoScaleDimensions = '6, 13'
	$formMain.AutoScaleMode = 'Font'
	$formMain.AutoSizeMode = 'GrowAndShrink'
	$formMain.ClientSize = '922, 489'
	$formMain.Name = 'formMain'
	$formMain.StartPosition = 'Manual'
	$formMain.Text = 'NiQITTools v.4'
	$formMain.add_Load($formMain_Load)
	#
	# DeletedItems
	#
	$DeletedItems.Location = '280, 10'
	$DeletedItems.Name = 'DeletedItems'
	$DeletedItems.Size = '104, 24'
	$DeletedItems.TabIndex = 30
	$DeletedItems.Text = 'ShowDeleted'
	$DeletedItems.UseCompatibleTextRendering = $True
	$DeletedItems.UseVisualStyleBackColor = $True
	$DeletedItems.add_CheckedChanged($DeletedItems_CheckedChanged)
	#
	# uniIDCell
	#
	$uniIDCell.FormattingEnabled = $True
	$uniIDCell.Location = '10, 115'
	$uniIDCell.Name = 'uniIDCell'
	$uniIDCell.Size = '99, 21'
	$uniIDCell.TabIndex = 5
	$uniIDCell.Visible = $False
	$uniIDCell.add_SelectedIndexChanged($uniIDCell_SelectedIndexChanged)
	#
	# uniID
	#
	$uniID.Enabled = $False
	$uniID.Location = '10, 90'
	$uniID.Name = 'uniID'
	$uniID.Size = '100, 20'
	$uniID.TabIndex = 29
	$uniID.Text = 'UniqueID'
	$uniID.Visible = $False
	#
	# Cell6Desc
	#
	$Cell6Desc.Enabled = $False
	$Cell6Desc.Location = '670, 90'
	$Cell6Desc.Name = 'Cell6Desc'
	$Cell6Desc.Size = '96, 20'
	$Cell6Desc.TabIndex = 28
	$Cell6Desc.Visible = $False
	#
	# Cell5Desc
	#
	$Cell5Desc.Enabled = $False
	$Cell5Desc.Location = '560, 90'
	$Cell5Desc.Name = 'Cell5Desc'
	$Cell5Desc.Size = '96, 20'
	$Cell5Desc.TabIndex = 27
	$Cell5Desc.Visible = $False
	#
	# Cell2Desc
	#
	$Cell2Desc.Enabled = $False
	$Cell2Desc.Location = '230, 90'
	$Cell2Desc.Name = 'Cell2Desc'
	$Cell2Desc.Size = '96, 20'
	$Cell2Desc.TabIndex = 26
	$Cell2Desc.Visible = $False
	#
	# Cell3Desc
	#
	$Cell3Desc.Enabled = $False
	$Cell3Desc.Location = '340, 90'
	$Cell3Desc.Name = 'Cell3Desc'
	$Cell3Desc.Size = '96, 20'
	$Cell3Desc.TabIndex = 25
	$Cell3Desc.Visible = $False
	#
	# Cell4Desc
	#
	$Cell4Desc.Enabled = $False
	$Cell4Desc.Location = '450, 90'
	$Cell4Desc.Name = 'Cell4Desc'
	$Cell4Desc.Size = '96, 20'
	$Cell4Desc.TabIndex = 24
	$Cell4Desc.Visible = $False
	#
	# Cell1Desc
	#
	$Cell1Desc.Enabled = $False
	$Cell1Desc.Location = '120, 90'
	$Cell1Desc.Name = 'Cell1Desc'
	$Cell1Desc.Size = '96, 20'
	$Cell1Desc.TabIndex = 23
	$Cell1Desc.Visible = $False
	#
	# Cell6
	#
	$Cell6.Location = '670, 115'
	$Cell6.Name = 'Cell6'
	$Cell6.Size = '96, 20'
	$Cell6.TabIndex = 11
	$Cell6.Visible = $False
	#
	# Cell5
	#
	$Cell5.Location = '560, 115'
	$Cell5.Name = 'Cell5'
	$Cell5.Size = '96, 20'
	$Cell5.TabIndex = 10
	$Cell5.Visible = $False
	#
	# Success
	#
	$Success.Enabled = $False
	$Success.Location = '560, 10'
	$Success.Multiline = $True
	$Success.Name = 'Success'
	$Success.Size = '295, 24'
	$Success.TabIndex = 13
	#
	# AUDEntry
	#
	$AUDEntry.Location = '780, 90'
	$AUDEntry.Name = 'AUDEntry'
	$AUDEntry.Size = '75, 45'
	$AUDEntry.TabIndex = 12
	$AUDEntry.UseCompatibleTextRendering = $True
	$AUDEntry.UseVisualStyleBackColor = $True
	$AUDEntry.Visible = $False
	$AUDEntry.add_Click($AUDEntry_Click)
	#
	# Cell2
	#
	$Cell2.Location = '230, 115'
	$Cell2.Name = 'Cell2'
	$Cell2.Size = '96, 20'
	$Cell2.TabIndex = 7
	$Cell2.Visible = $False
	#
	# cell3
	#
	$cell3.Location = '340, 115'
	$cell3.Name = 'cell3'
	$cell3.Size = '96, 20'
	$cell3.TabIndex = 8
	$cell3.Visible = $False
	#
	# Cell4
	#
	$Cell4.Location = '450, 115'
	$Cell4.Name = 'Cell4'
	$Cell4.Size = '96, 20'
	$Cell4.TabIndex = 9
	$Cell4.Visible = $False
	#
	# Cell1
	#
	$Cell1.Location = '120, 115'
	$Cell1.Name = 'Cell1'
	$Cell1.Size = '96, 20'
	$Cell1.TabIndex = 6
	$Cell1.Visible = $False
	#
	# buttonDelete
	#
	$buttonDelete.Location = '190, 50'
	$buttonDelete.Name = 'buttonDelete'
	$buttonDelete.Size = '75, 23'
	$buttonDelete.TabIndex = 4
	$buttonDelete.Text = 'Delete'
	$buttonDelete.UseCompatibleTextRendering = $True
	$buttonDelete.UseVisualStyleBackColor = $True
	$buttonDelete.Visible = $False
	$buttonDelete.add_Click($buttonDelete_Click)
	#
	# buttonUpdate
	#
	$buttonUpdate.Location = '100, 50'
	$buttonUpdate.Name = 'buttonUpdate'
	$buttonUpdate.Size = '75, 23'
	$buttonUpdate.TabIndex = 3
	$buttonUpdate.Text = 'Update'
	$buttonUpdate.UseCompatibleTextRendering = $True
	$buttonUpdate.UseVisualStyleBackColor = $True
	$buttonUpdate.Visible = $False
	$buttonUpdate.add_Click($buttonUpdate_Click)
	#
	# buttonAdd
	#
	$buttonAdd.Location = '10, 50'
	$buttonAdd.Name = 'buttonAdd'
	$buttonAdd.Size = '75, 23'
	$buttonAdd.TabIndex = 2
	$buttonAdd.Text = 'Add'
	$buttonAdd.UseCompatibleTextRendering = $True
	$buttonAdd.UseVisualStyleBackColor = $True
	$buttonAdd.Visible = $False
	$buttonAdd.add_Click($buttonAdd_Click)
	#
	# NiQITTablesSelection
	#
	$NiQITTablesSelection.FormattingEnabled = $True
	$NiQITTablesSelection.Location = '10, 10'
	$NiQITTablesSelection.Name = 'NiQITTablesSelection'
	$NiQITTablesSelection.Size = '255, 21'
	$NiQITTablesSelection.TabIndex = 1
	$NiQITTablesSelection.add_SelectedIndexChanged($NiQITTablesSelection_SelectedIndexChanged)
	#
	# datagridviewResults
	#
	$datagridviewResults.AllowUserToAddRows = $False
	$datagridviewResults.AllowUserToDeleteRows = $False
	$datagridviewResults.Anchor = 'Top, Bottom, Left, Right'
	$datagridviewResults.AutoSizeColumnsMode = 'Fill'
	$datagridviewResults.AutoSizeRowsMode = 'AllCells'
	$datagridviewResults.Location = '12, 181'
	$datagridviewResults.Name = 'datagridviewResults'
	$datagridviewResults.ReadOnly = $True
	$datagridviewResults.Size = '898, 270'
	$datagridviewResults.TabIndex = 15
	$datagridviewResults.add_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.Location = '835, 454'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 14
	$buttonExit.Text = 'E&xit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	$formMain.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formMain.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formMain.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formMain.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formMain.ShowDialog()

} #End Function

#Call the form
Show-NiQITTools_generic_psf | Out-Null
